version: '3.8'

services:
  postgres:
    image: postgis/postgis
    container_name: postgres
    env_file:
      - ../environment/${ENV}.env
      - ../environment/secrets/${ENV}/postgres_password.env
    volumes:
      - ../../src/adapters/infrastructure/database/scripts/setup.${ENV}.sql:/docker-entrypoint-initdb.d/setup.sql:ro
      - /opt/postgresql/${ENV}/data:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    depends_on:
      - redis
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U general_server_${ENV}']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:latest
    container_name: redis
    env_file:
      - ../environment/${ENV}.env
      - ../environment/secrets/${ENV}/redis_password.env
    # command: redis-server --requirepass $REDIS_PASSWORD
    volumes:
      - /opt/redis/${ENV}/data:/var/lib/redis/
    ports:
      - 6379:6379
    healthcheck:
      test: exec 3<>/dev/tcp/127.0.0.1/6379 && echo -e "PING\r\n" >&3 && head -c 7 <&3 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5

  server:
    container_name: general_server
    depends_on:
      - postgres
    init: true
    env_file:
      - ../environment/${ENV}.env
      - ../environment/secrets/${ENV}/app_token_secret.env
      - ../environment/secrets/${ENV}/postgres_password.env
      - ../environment/secrets/${ENV}/redis_password.env
    build:
      context: ../../
      target: ${ENV}
      args:
        BUILD_DATE: date -u +'%Y-%m-%dT%H:%M:%SZ'
        BUILD_VERSION: 0.0.0
        PORT: 3001
    ports:
      - 3001:3001
    healthcheck:
      test: curl --insecure https://127.0.0.1:3001 || exit 1
      interval: 1m30s
      timeout: 10s
      retries: 3
    restart: always

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../nginx/proxy.conf:/etc/nginx/proxy.conf
      - ../nginx/gzip.conf:/etc/nginx/gzip.conf
      - ../nginx/connection.conf:/etc/nginx/connection.conf
      - ../nginx/logs.conf:/etc/nginx/logs.conf
      - ../nginx/cache.conf:/etc/nginx/cache.conf
      - ../nginx/headers.conf:/etc/nginx/headers.conf
      - ../nginx/mime.types:/etc/nginx/mime.types
      - ../nginx/cache/:/etc/nginx/cache
      - ../credentials/:/etc/credentials/
    ports:
      - 443:443
    depends_on:
      - server
      # - grafana
      # server:
      #   condition: service_healthy
# Monitoring

# grafana:
#   image: grafana/grafana:latest
#   volumes:
#     # - /opt/grafana/data:/var/lib/grafana
#     - ./src/adapters/infrastructure/monitoring/grafana/config.ini:/etc/grafana/config.ini
#     - ./src/adapters/infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
#     - ./src/adapters/infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
#   environment:
#     - ../environment/${ENV}.env
#     - ../environment/secrets/${ENV}/gf_security_admin_password.env
#   depends_on:
#     - prometheus
#   ports:
#     - 4000:3000

# prometheus:
#   image: prom/prometheus:latest
#   container_name: prometheus
#   ports:
#     - 4001:9090
#   command:
#     - --config.file=/etc/prometheus/prometheus.yml
#   volumes:
#     - ./src/adapters/infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
#   depends_on:
#     - cadvisor
#     - node_exporter

# cadvisor:
#   image: gcr.io/google-containers/cadvisor:latest
#   container_name: cadvisor
#   ports:
#     - 4002:8080
#   volumes:
#     - /:/rootfs:ro
#     - /var/run:/var/run:rw
#     - /sys:/sys:ro
#     - /var/lib/docker/:/var/lib/docker:ro
#   depends_on:
#     - redis_prometheus

# node_exporter:
#   image: prom/node-exporter
#   ports:
#     - 4003:9100

# redis_prometheus:
#   image: redis:latest
#   container_name: redis_prometheus
#   volumes:
#     - /opt/redis_prometheus/v2/${ENV}/data:/var/lib/redis/
#   ports:
#     - 6380:6379
#   healthcheck:
#     test: exec 3<>/dev/tcp/127.0.0.1/6380 && echo -e "PING\r\n" >&3 && head -c 7 <&3 || exit 1
#     interval: 10s
#     timeout: 5s
#     retries: 5

# Logs

# logstash:
#   image: logstash:7.9.2
#   container_name: logstash
#   env_file:
#     - ../environment/${ENV}.env
#     # - ../environment/secrets/${ENV}/logstash_password.env
#   volumes:
#     - ./src/adapters/user_interface/drivers/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
#     - ./src/adapters/user_interface/drivers/logstash/config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
#   # healthcheck:
#   #   test: ["CMD-SHELL", "pg_isready -U general_server_${ENV}"]
#   #   interval: 10s
#   #   timeout: 5s
#   #   retries: 5

# elasticsearch:
#   image: elasticsearch:7.9.2
#   container_name: elasticsearch
#   env_file:
#     - ../environment/${ENV}.env
#     # - ../environment/secrets/${ENV}/elasticsearch_password.env
#   volumes:
#     - /opt/elk/elasticsearch/${ENV}/data:/usr/share/elasticsearch/data
#   ports:
#     - 9200:9200
#     - 9300:9300
#   ulimits:
#     memlock:
#       soft: -1
#       hard: -1
#     nofile:
#       soft: 200000
#       hard: 200000
#   depends_on:
#     - logstash
#   # healthcheck:
#   #   test: ["CMD-SHELL", "pg_isready -U general_server_${ENV}"]
#   #   interval: 10s
#   #   timeout: 5s
#   #   retries: 5

# kibana:
#   image: kibana:7.9.2
#   container_name: kibana
#   env_file:
#     - ../environment/${ENV}.env
#     # - ../environment/secrets/${ENV}/kibana_password.env
#   volumes:
#     - ./src/adapters/user_interface/drivers/visualization/kibana/config/:/usr/share/kibana/config:ro
#   ports:
#     - 9200:9200
#     - 9300:9300
#   ulimits:
#     memlock:
#       soft: -1
#       hard: -1
#     nofile:
#       soft: 200000
#       hard: 200000
#   depends_on:
#     - elasticsearch
#   # healthcheck:
#   #   test: ["CMD-SHELL", "pg_isready -U general_server_${ENV}"]
#   #   interval: 10s
#   #   timeout: 5s
#   #   retries: 5
